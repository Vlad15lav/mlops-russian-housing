version: '3.7'

services:
  # Minio сервер S3 хранилища
  minio:
    container_name: minio
    hostname: minio
    image: minio/minio:RELEASE.2024-02-26T09-33-48Z.fips
    command: server --console-address ":9001" /data/
    expose:
      - "9000"
      - "9001"
    networks:
      - minio_net
    environment:
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://nginx:9000/minio/health/live"]
      interval: 20s
      timeout: 10s
      retries: 3
    volumes:
      - .docker/minio_data:/data

  # Создание бакета для MLFlow
  minio-create-bucket:
    image: minio/mc
    networks:
      - minio_net
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    entrypoint: >
      bash -c "
      mc alias set minio http://nginx:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb minio/${AWS_S3_BUCKET};
      mc mb minio/${AIRFLOW_S3_BUCKET}
      mc mb minio/${DVC_S3_BUCKET}
      "
      # bash -c "
      # mc alias set minio http://nginx:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      # if ! mc ls minio|grep --quiet ${AWS_S3_BUCKET}; then
      #   mc mb minio/${AWS_S3_BUCKET}
      # else
      #   echo '${AWS_S3_BUCKET} already exists'
      # fi;
      # if ! mc ls minio|grep --quiet airflow-data; then
      #   mc mb minio/airflow-data
      # else
      #   echo 'airflow-data already exists'
      # fi
      # "

  # Nginx прокси сервер для Minio
  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:1.25.4-alpine
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - minio_net
      # - mlops-russian-housing_default
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - minio

  # Сервер база данных Postgres
  # db:
  #   container_name: postgres
  #   image: postgres:16.2-alpine3.19
  #   restart: always
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     PGDATA: /data/postgres
  #   volumes:
  #     - postgres-data:/data/postgres
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - postgres_net
  
  # # UI сервер для Postgres
  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   volumes:
  #      - pgadmin-data:/var/lib/pgadmin
  #   ports:
  #     - "5050:80"
  #   networks:
  #     - postgres_net
  
  # # MLFlow Tracking сервер
  # mlflow:
  #   container_name: mlflow_server
  #   build: ./docker/mlflow_image
  #   image: mlflow_server
  #   restart: always
  #   environment:
  #     AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
  #     AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
  #     MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
  #   command: >
  #     mlflow server
  #     --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
  #     --serve-artifacts
  #     --artifacts-destination s3://${AWS_S3_BUCKET}
  #     --host 0.0.0.0
  #   ports:
  #     - "5000:5000"
  #   networks:
  #     - minio_net
  #     - postgres_net
  #   depends_on:
  #     - minio
  #     - db

volumes:
  postgres-data:
    name: postgres-data
  pgadmin-data:
    name: pgadmin-data

networks:
  # mlops-russian-housing_default:
  #   external: true
  minio_net:
    name: minio_net
    driver: bridge
  postgres_net:
    name: postgres_net
    driver: bridge
